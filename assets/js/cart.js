import { updateCartCount } from "./cart-utils.js";

document.addEventListener("DOMContentLoaded", () => {
  // ===== –í—Å—Ç–∞–≤–∫–∞ —Ö–µ–¥–µ—Ä–∞ =====
  fetch("components/header-default.html")
    .then((res) => res.text())
    .then((html) => {
      document.body.insertAdjacentHTML("afterbegin", html);
      updateCartCount();
    });

  // ===== –í—Å—Ç–∞–≤–∫–∞ —Ñ—É—Ç–µ—Ä–∞ =====
  fetch("components/footer.html")
    .then((res) => res.text())
    .then((html) => {
      document.body.insertAdjacentHTML("beforeend", html);
    });

  // ===== –í–∏–≤—ñ–¥ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—à–∏–∫—É =====
  const container = document.querySelector(".cart-items");
  const totalEl = document.getElementById("cart-total");

  function renderCart() {
    const cart = JSON.parse(localStorage.getItem("cart")) || [];
    container.innerHTML = "";
    let total = 0;

    cart.forEach((item, index) => {
      total += item.price * item.quantity;

      const card = document.createElement("div");
      card.className = "cart-item";
      card.innerHTML = `
        <img src="${item.image}" alt="${item.name}" />
        <div class="cart-info">
          <h4>${item.name}</h4>
          <p>–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity}</p>
          <p>–¶—ñ–Ω–∞: ${item.price} –≥—Ä–Ω</p>
          <p>–°—É–º–∞: ${item.price * item.quantity} –≥—Ä–Ω</p>
          <button class="remove-btn" data-index="${index}">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
        </div>
      `;
      container.appendChild(card);
    });

    totalEl.textContent = `${total} –≥—Ä–Ω`;

    // ===== –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚Äú–í–∏–¥–∞–ª–∏—Ç–∏‚Äù =====
    document.querySelectorAll(".remove-btn").forEach((btn) => {
      btn.addEventListener("click", () => {
        const index = parseInt(btn.dataset.index, 10);
        cart.splice(index, 1);
        localStorage.setItem("cart", JSON.stringify(cart));
        updateCartCount();
        renderCart();
        renderSummary();
      });
    });
  }

  // ===== –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –±–ª–æ–∫ ‚Äú–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è‚Äù =====
  function renderSummary() {
    const summaryContainer = document.querySelector(".summary-items");
    const summaryTotal = document.getElementById("summary-total");
    const cart = JSON.parse(localStorage.getItem("cart")) || [];

    summaryContainer.innerHTML = "";
    let total = 0;

    cart.forEach((item) => {
      total += item.price * item.quantity;

      const block = document.createElement("div");
      block.className = "item";
      block.innerHTML = `
        <img src="${item.image}" alt="${item.name}" />
        <div class="item-info">
          <div>${item.name}</div>
          <small>${item.quantity} √ó ${item.price} –≥—Ä–Ω</small>
        </div>
      `;
      summaryContainer.appendChild(block);
    });

    summaryTotal.textContent = `${total} –≥—Ä–Ω`;
  }

  renderCart();
  renderSummary();

  // ===== –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è =====
  document.getElementById("checkout-btn").addEventListener("click", () => {
    document.querySelector(".checkout-form").classList.remove("hidden");
    window.scrollTo({ top: document.body.scrollHeight, behavior: "smooth" });
  });

  // ===== –§–æ—Ä–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è =====
  const form = document.getElementById("order-form");

  const deliveryData = {
    "nova-poshta": {
      regions: {
        –ö–∏—ó–≤—Å—å–∫–∞: ["–ë–æ—è—Ä–∫–∞", "–í–∏—à–Ω–µ–≤–µ"],
        –õ—å–≤—ñ–≤—Å—å–∫–∞: ["–õ—å–≤—ñ–≤", "–î—Ä–æ–≥–æ–±–∏—á"],
      },
      offices: {
        –ë–æ—è—Ä–∫–∞: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1", "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ2"],
        –í–∏—à–Ω–µ–≤–µ: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1"],
        –õ—å–≤—ñ–≤: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1", "–ü–æ—à—Ç–æ–º–∞—Ç ‚Ññ3"],
        –î—Ä–æ–≥–æ–±–∏—á: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1"],
      },
    },
    "ukr-poshta": {
      regions: {
        –ö–∏—ó–≤—Å—å–∫–∞: ["–ë–æ—è—Ä–∫–∞", "–§–∞—Å—Ç—ñ–≤"],
        –õ—å–≤—ñ–≤—Å—å–∫–∞: ["–õ—å–≤—ñ–≤", "–°–∞–º–±—ñ—Ä"],
      },
      offices: {
        –ë–æ—è—Ä–∫–∞: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 101", "–ü–æ—à—Ç–æ–º–∞—Ç 102"],
        –§–∞—Å—Ç—ñ–≤: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 103"],
        –õ—å–≤—ñ–≤: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 104"],
        –°–∞–º–±—ñ—Ä: ["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 105"],
      },
    },
  };

  form.delivery.addEventListener("change", () => {
    const method = form.delivery.value;
    const regions = Object.keys(deliveryData[method].regions);

    form.region.innerHTML = `<option value="">–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å</option>`;
    regions.forEach((region) => {
      const opt = document.createElement("option");
      opt.value = region;
      opt.textContent = region;
      form.region.appendChild(opt);
    });

    form.city.innerHTML = `<option value="">–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç</option>`;
    form.office.innerHTML = `<option value="">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è</option>`;
  });

  form.region.addEventListener("change", () => {
    const method = form.delivery.value;
    const cities = deliveryData[method].regions[form.region.value];

    form.city.innerHTML = `<option value="">–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç</option>`;
    cities.forEach((city) => {
      const opt = document.createElement("option");
      opt.value = city;
      opt.textContent = city;
      form.city.appendChild(opt);
    });

    form.office.innerHTML = `<option value="">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è</option>`;
  });

  form.city.addEventListener("change", () => {
    const method = form.delivery.value;
    const offices = deliveryData[method].offices[form.city.value];

    form.office.innerHTML = `<option value="">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è</option>`;
    offices.forEach((office) => {
      const opt = document.createElement("option");
      opt.value = office;
      opt.textContent = office;
      form.office.appendChild(opt);
    });
  });

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const cart = JSON.parse(localStorage.getItem("cart")) || [];

    console.log("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:", { ...data, cart });

    alert("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!");
    localStorage.removeItem("cart");
    updateCartCount();
    renderCart();
    renderSummary();
    window.location.href = "index.html";
  });
});
